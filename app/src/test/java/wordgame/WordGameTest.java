/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package wordgame;

import org.junit.Test;
import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;

public class WordGameTest {
  @Test
  public void appPicksARandomWord() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("python", "ruby", "java"));
    WordGame game = new WordGame(words);

    assertTrue(words.contains(game.getChosenWord()));
  }

  @Test
  public void appShowsWordWithFirstLetterOnly() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("python"));
    WordGame game = new WordGame(words);

    assertEquals(String.valueOf("p_____"), game.getRenderedWord());
  }

  @Test
  public void appStartWithTenAttempts() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("python"));
    WordGame game = new WordGame(words);

    assertEquals(Integer.valueOf(10), game.getAttempts());
  }

  @Test
  public void appUsersGuessIsAddedToList() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("java"));
    WordGame game = new WordGame(words);

    game.addGuess('a');

    assertEquals(Character.valueOf('a'), game.getGuesses().get(1));
  }

  @Test
  public void appRendersWordCorrectlyGivenGuesses() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("python"));
    WordGame game = new WordGame(words);

    assertEquals(String.valueOf("p_____"), game.getRenderedWord());
    game.addGuess('a');
    assertEquals(String.valueOf("p_____"), game.getRenderedWord());
    game.addGuess('y');
    assertEquals(String.valueOf("py____"), game.getRenderedWord());
    game.addGuess('h');
    assertEquals(String.valueOf("py_h__"), game.getRenderedWord());
  }

  @Test
  public void appRendersWordCorrectlyGivenGuesses2() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("java"));
    WordGame game = new WordGame(words);

    assertEquals(String.valueOf("j___"), game.getRenderedWord());
    game.addGuess('a');
    assertEquals(String.valueOf("ja_a"), game.getRenderedWord());
  }

  @Test
  public void methodChecksIfPlayerHasWon() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("java"));
    WordGame game = new WordGame(words);

    assertEquals(String.valueOf("j___"), game.getRenderedWord());
    assertFalse(game.checkWin());
    game.addGuess('a');
    assertEquals(String.valueOf("ja_a"), game.getRenderedWord());
    assertFalse(game.checkWin());
    game.addGuess('v');
    assertEquals(String.valueOf("java"), game.getRenderedWord());
    assertTrue(game.checkWin());
  }

  @Test
  public void methodToGetUserInput() {
    String userInput = String.format("a");
    ByteArrayInputStream fakeIn = new ByteArrayInputStream(userInput.getBytes());
    System.setIn(fakeIn);

    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("java"));
    WordGame game = new WordGame(words);

    game.getUserGuess();

    assertEquals(Character.valueOf('a'), game.getGuesses().get(1));
  }

  @Test
  public void methodToPrintOutWord() {
    ArrayList<String> words = new ArrayList<String>(
        Arrays.asList("java"));
    WordGame game = new WordGame(words);

    String expected = "j___";
    ByteArrayOutputStream fakeOut = new ByteArrayOutputStream();
    PrintStream fakeStream = new PrintStream(fakeOut);
    System.setOut(fakeStream);

    game.printWord();

    String[] lines = fakeOut.toString().split(System.lineSeparator());
    String actual = lines[lines.length - 1];

    assertEquals(expected, actual);
  }
}
